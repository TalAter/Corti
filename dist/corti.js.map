{"version":3,"file":"corti.js","sources":["../src/BasicEvent.js","../src/DOMException.js","../src/SpeechRecognitionEvent.js","../src/SpeechRecognitionResultList.js","../src/SpeechRecognitionResult.js","../src/SpeechRecognitionAlternative.js","../src/corti.js"],"sourcesContent":["class BasicEvent {\n  constructor(type) {\n    this.type = type;\n  }\n}\n\nexport default typeof globalThis.Event !== 'undefined' ? globalThis.Event : BasicEvent;\n","const CustomDOMException = (() => {\n  if (typeof globalThis.DOMException !== 'undefined') {\n    return globalThis.DOMException;\n  }\n  return class DOMException extends Error {\n    constructor(message, name) {\n      super(message);\n      this.name = name || 'DOMException';\n    }\n  };\n})();\n\nexport default CustomDOMException;\n","import BasicEvent from './BasicEvent';\n\nclass SpeechRecognitionEvent extends BasicEvent {\n  interpretation = null;\n\n  emma = null;\n\n  constructor(type, { resultIndex, results }) {\n    super(type);\n    this.resultIndex = resultIndex;\n    this.results = results;\n  }\n}\n\nexport default SpeechRecognitionEvent;\n","class SpeechRecognitionResultList {\n  constructor(results = []) {\n    results.forEach((result, index) => {\n      this[index] = result;\n    });\n    this.length = results.length;\n  }\n\n  item(index) {\n    if (arguments.length === 0) {\n      throw new TypeError(\n        \"Failed to execute 'item' on 'SpeechRecognitionResultList': 1 argument required, but only 0 present.\"\n      );\n    }\n    if (typeof index !== 'number' || Number.isNaN(index)) {\n      return this[0] || null;\n    }\n    return this[index] || null;\n  }\n\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this.length; i += 1) {\n      yield this[i];\n    }\n  }\n}\nexport default SpeechRecognitionResultList;\n","class SpeechRecognitionResult {\n  isFinal = true;\n\n  constructor(alternatives = []) {\n    alternatives.forEach((alternative, index) => {\n      this[index] = alternative;\n    });\n    this.length = alternatives.length;\n  }\n\n  item(index) {\n    if (arguments.length === 0) {\n      throw new TypeError(\n        \"Failed to execute 'item' on 'SpeechRecognitionResult': 1 argument required, but only 0 present.\"\n      );\n    }\n    if (typeof index !== 'number' || Number.isNaN(index)) {\n      return this[0] || null;\n    }\n    return this[index] || null;\n  }\n\n  *[Symbol.iterator]() {\n    for (let i = 0; i < this.length; i += 1) {\n      yield this[i];\n    }\n  }\n}\nexport default SpeechRecognitionResult;\n","class SpeechRecognitionAlternative {\n  constructor(transcript, confidence = 1) {\n    this.transcript = transcript;\n    this.confidence = confidence;\n  }\n}\nexport default SpeechRecognitionAlternative;\n","//! Corti - A mock implementation of the browserâ€™s SpeechRecognition for automated testing\n//! version : 1.0.0-dev\n//! author  : Tal Ater @TalAter\n//! license : MIT\n//! https://github.com/TalAter/Corti\n\nimport BasicEvent from './BasicEvent';\nimport DOMException from './DOMException';\nimport SpeechRecognitionEvent from './SpeechRecognitionEvent';\nimport SpeechRecognitionResultList from './SpeechRecognitionResultList';\nimport SpeechRecognitionResult from './SpeechRecognitionResult';\nimport SpeechRecognitionAlternative from './SpeechRecognitionAlternative';\n\nclass SpeechRecognition {\n  /**\n   * The maximum number of SpeechRecognitionAlternatives provided per SpeechRecognitionResult\n   * @type {number}\n   */\n  #maxAlternatives = 1;\n\n  /**\n   * The language of the current SpeechRecognition\n   * @type {string}\n   */\n  #lang = '';\n\n  /**\n   * Controls whether continuous results are returned for each recognition, or only a single result\n   * @type {boolean}\n   */\n  #continuous = false;\n\n  /**\n   * Indicates whether interim results should be returned (true) or just the final result (false)\n   * @type {boolean}\n   */\n  #interimResults = false;\n\n  /**\n   * Indicates whether the recognition service has started\n   * @type {boolean}\n   * @private\n   */\n  #started = false;\n\n  /**\n   * Listeners for the events registered with addEventListener\n   * @type {Map<string, Function[]>}\n   * @private\n   * @todo Add support for other listeners defined in the spec https://dvcs.w3.org/hg/speech-api/raw-file/tip/webspeechapi#speechreco-events\n   */\n  #listeners = new Map([\n    ['start', []],\n    ['soundstart', []],\n    ['end', []],\n    ['result', []],\n  ]);\n\n  /**\n   * Listeners for the events registered with on* methods\n   * @type {Map<string, Function|null>}\n   * @private\n   * @todo Add support for other listeners defined in the spec https://dvcs.w3.org/hg/speech-api/raw-file/tip/webspeechapi#speechreco-events\n   */\n  #onListeners = new Map([\n    ['onstart', null],\n    ['onsoundstart', null],\n    ['onend', null],\n    ['onresult', null],\n  ]);\n\n  constructor() {\n    // Dynamically add getters and setters for on* properties\n    this.#onListeners.forEach((_, eventType) => {\n      Object.defineProperty(this, eventType, {\n        get: () => this.#onListeners.get(eventType),\n        set: value => {\n          if (typeof value === 'function') {\n            this.#onListeners.set(eventType, value);\n          }\n        },\n      });\n    });\n  }\n\n  get maxAlternatives() {\n    return this.#maxAlternatives;\n  }\n\n  set maxAlternatives(val) {\n    if (typeof val === 'number') {\n      this.#maxAlternatives = Math.floor(val);\n    } else {\n      this.#maxAlternatives = 0;\n    }\n  }\n\n  get lang() {\n    return this.#lang;\n  }\n\n  set lang(val) {\n    if (val === undefined) {\n      this.#lang = 'undefined';\n    } else {\n      this.#lang = val.toString();\n    }\n  }\n\n  get continuous() {\n    return this.#continuous;\n  }\n\n  set continuous(val) {\n    this.#continuous = Boolean(val);\n  }\n\n  get interimResults() {\n    return this.#interimResults;\n  }\n\n  set interimResults(val) {\n    this.#interimResults = Boolean(val);\n  }\n\n  /**\n   * Checks if the recognition has started.\n   * This is not part of the spec, but is used by mock object for testing.\n   * @returns {boolean}\n   */\n  isStarted() {\n    return this.#started;\n  }\n\n  /**\n   * Starts the speech recognition\n   * @throws {DOMException} If recognition has already started\n   */\n  start() {\n    if (this.#started) {\n      throw new DOMException(\"Failed to execute 'start' on 'SpeechRecognition': recognition has already started.\");\n    }\n\n    this.#started = true;\n\n    this.#emit('start');\n    this.#emit('soundstart');\n  }\n\n  /**\n   * Aborts the speech recognition\n   */\n  abort() {\n    if (!this.#started) {\n      return;\n    }\n    this.#started = false;\n    this.#emit('end');\n  }\n\n  /**\n   * Stops the speech recognition and attempts to return a SpeechRecognitionResult\n   * @todo Implement stop's behavior according to the spec. Unlike abort, stop will attempt to return a SpeechRecognitionResult using the audio captured so far.\n   */\n  stop() {\n    return this.abort();\n  }\n\n  /**\n   * Register an event listener for the given event type\n   * @param {string} type The type of event to listen for\n   * @param {Function} listener The callback function to be called when the event is fired\n   */\n  addEventListener(type, listener) {\n    if (this.#listeners.has(type)) {\n      this.#listeners.get(type).push(listener);\n    }\n  }\n\n  /* eslint class-methods-use-this: \"off\" */\n  /* eslint no-unused-vars: \"off\" */\n  /**\n   * Remove an event listener for the given event type\n   * @param {string} type The type of event to remove\n   * @param {Function} listener The callback function to be removed\n   * @todo Implement removeEventListener\n   */\n  removeEventListener(type, listener) {}\n\n  /**\n   * Simulate speech said and recognized (if SpeechRecognition is running)\n   * @param {string|string[]} alternatives The sentence or sentences to be said\n   */\n  say(alternatives) {\n    if (!this.#started) {\n      return;\n    }\n\n    const sentences = Array.isArray(alternatives) ? alternatives : [alternatives];\n\n    // Ensure the length of speechRecognitionAlternatives matches #maxAlternatives\n    if (sentences.length > this.#maxAlternatives) {\n      sentences.splice(this.#maxAlternatives);\n    } else {\n      const paddingNeeded = this.#maxAlternatives - sentences.length;\n      let previousPaddedSentence = sentences[0];\n      for (let i = 0; i < paddingNeeded; i += 1) {\n        // if i is even, add \"and so on\" to previousPaddedSentence else add \"and so forth\"\n        if (i % 2 === 0) {\n          previousPaddedSentence = `${previousPaddedSentence} and so on`;\n        } else {\n          previousPaddedSentence = `${previousPaddedSentence} and so forth`;\n        }\n        sentences.push(previousPaddedSentence);\n      }\n    }\n\n    const speechRecognitionAlternatives = sentences.map((sentence, index) => {\n      // Confidence starts at 0.95 and decreases by 10% but never under 0.01\n      const confidence = Math.max(0.95 * 0.9 ** index, 0.01);\n      return new SpeechRecognitionAlternative(sentence, confidence);\n    });\n\n    const SREvent = new SpeechRecognitionEvent('result', {\n      results: new SpeechRecognitionResultList([new SpeechRecognitionResult(speechRecognitionAlternatives)]),\n      resultIndex: 0,\n    });\n    this.#emit('result', SREvent);\n\n    if (!this.#continuous) {\n      this.abort();\n    }\n  }\n\n  /**\n   * Emit an event to all registered listeners\n   * @param {string} eventType The type of event to emit\n   * @param {Object} eventObject The event object to emit\n   * @todo Corti will emit events in the order they were registered with addEventListener and then with the on* property. This is not the same as the Chrome implementation which will emit the listener registered with on* at the order it was registered.\n   */\n  #emit(eventType, eventObject) {\n    const eventToEmit = eventObject || new BasicEvent(eventType);\n\n    // Iterate over the listeners for the given event type\n    if (this.#listeners.has(eventType)) {\n      this.#listeners.get(eventType).forEach(listener => listener(eventToEmit));\n    }\n    const onListener = this.#onListeners.get(`on${eventType}`);\n    if (onListener) {\n      onListener(eventToEmit);\n    }\n  }\n}\n\nexport {\n  SpeechRecognition,\n  SpeechRecognitionEvent,\n  SpeechRecognitionResultList,\n  SpeechRecognitionResult,\n  SpeechRecognitionAlternative,\n};\n"],"names":["BasicEvent","DOMException"],"mappings":";;;EAAA,MAAM,UAAU,CAAC;EACjB,EAAE,WAAW,CAAC,IAAI,EAAE;EACpB,IAAI,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;EACrB,GAAG;EACH,CAAC;AACD;AACA,qBAAe,OAAO,UAAU,CAAC,KAAK,KAAK,WAAW,GAAG,UAAU,CAAC,KAAK,GAAG,UAAU;;ECNtF,MAAM,kBAAkB,GAAG,CAAC,MAAM;EAClC,EAAE,IAAI,OAAO,UAAU,CAAC,YAAY,KAAK,WAAW,EAAE;EACtD,IAAI,OAAO,UAAU,CAAC,YAAY,CAAC;EACnC,GAAG;EACH,EAAE,OAAO,MAAM,YAAY,SAAS,KAAK,CAAC;EAC1C,IAAI,WAAW,CAAC,OAAO,EAAE,IAAI,EAAE;EAC/B,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC;EACrB,MAAM,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,cAAc,CAAC;EACzC,KAAK;EACL,GAAG,CAAC;EACJ,CAAC,GAAG;;ECRJ,MAAM,sBAAsB,SAASA,YAAU,CAAC;EAChD,EAAE,cAAc,GAAG,IAAI,CAAC;AACxB;EACA,EAAE,IAAI,GAAG,IAAI,CAAC;AACd;EACA,EAAE,WAAW,CAAC,IAAI,EAAE,EAAE,WAAW,EAAE,OAAO,EAAE,EAAE;EAC9C,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC;EAChB,IAAI,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;EACnC,IAAI,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;EAC3B,GAAG;EACH;;ECZA,MAAM,2BAA2B,CAAC;EAClC,EAAE,WAAW,CAAC,OAAO,GAAG,EAAE,EAAE;EAC5B,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,KAAK,KAAK;EACvC,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC;EAC3B,KAAK,CAAC,CAAC;EACP,IAAI,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;EACjC,GAAG;AACH;EACA,EAAE,IAAI,CAAC,KAAK,EAAE;EACd,IAAI,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;EAChC,MAAM,MAAM,IAAI,SAAS;EACzB,QAAQ,qGAAqG;EAC7G,OAAO,CAAC;EACR,KAAK;EACL,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;EAC1D,MAAM,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;EAC7B,KAAK;EACL,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC;EAC/B,GAAG;AACH;EACA,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG;EACvB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;EAC7C,MAAM,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;EACpB,KAAK;EACL,GAAG;EACH;;ECzBA,MAAM,uBAAuB,CAAC;EAC9B,EAAE,OAAO,GAAG,IAAI,CAAC;AACjB;EACA,EAAE,WAAW,CAAC,YAAY,GAAG,EAAE,EAAE;EACjC,IAAI,YAAY,CAAC,OAAO,CAAC,CAAC,WAAW,EAAE,KAAK,KAAK;EACjD,MAAM,IAAI,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC;EAChC,KAAK,CAAC,CAAC;EACP,IAAI,IAAI,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,CAAC;EACtC,GAAG;AACH;EACA,EAAE,IAAI,CAAC,KAAK,EAAE;EACd,IAAI,IAAI,SAAS,CAAC,MAAM,KAAK,CAAC,EAAE;EAChC,MAAM,MAAM,IAAI,SAAS;EACzB,QAAQ,iGAAiG;EACzG,OAAO,CAAC;EACR,KAAK;EACL,IAAI,IAAI,OAAO,KAAK,KAAK,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;EAC1D,MAAM,OAAO,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC;EAC7B,KAAK;EACL,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC;EAC/B,GAAG;AACH;EACA,EAAE,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG;EACvB,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC,EAAE;EAC7C,MAAM,MAAM,IAAI,CAAC,CAAC,CAAC,CAAC;EACpB,KAAK;EACL,GAAG;EACH;;EC3BA,MAAM,4BAA4B,CAAC;EACnC,EAAE,WAAW,CAAC,UAAU,EAAE,UAAU,GAAG,CAAC,EAAE;EAC1C,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;EACjC,IAAI,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;EACjC,GAAG;EACH;;ECLA;EACA;EACA;EACA;EACA;AACA;AAOA;EACA,MAAM,iBAAiB,CAAC;EACxB;EACA;EACA;EACA;EACA,EAAE,gBAAgB,GAAG,CAAC,CAAC;AACvB;EACA;EACA;EACA;EACA;EACA,EAAE,KAAK,GAAG,EAAE,CAAC;AACb;EACA;EACA;EACA;EACA;EACA,EAAE,WAAW,GAAG,KAAK,CAAC;AACtB;EACA;EACA;EACA;EACA;EACA,EAAE,eAAe,GAAG,KAAK,CAAC;AAC1B;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,QAAQ,GAAG,KAAK,CAAC;AACnB;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,UAAU,GAAG,IAAI,GAAG,CAAC;EACvB,IAAI,CAAC,OAAO,EAAE,EAAE,CAAC;EACjB,IAAI,CAAC,YAAY,EAAE,EAAE,CAAC;EACtB,IAAI,CAAC,KAAK,EAAE,EAAE,CAAC;EACf,IAAI,CAAC,QAAQ,EAAE,EAAE,CAAC;EAClB,GAAG,CAAC,CAAC;AACL;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,YAAY,GAAG,IAAI,GAAG,CAAC;EACzB,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC;EACrB,IAAI,CAAC,cAAc,EAAE,IAAI,CAAC;EAC1B,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC;EACnB,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC;EACtB,GAAG,CAAC,CAAC;AACL;EACA,EAAE,WAAW,GAAG;EAChB;EACA,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,SAAS,KAAK;EAChD,MAAM,MAAM,CAAC,cAAc,CAAC,IAAI,EAAE,SAAS,EAAE;EAC7C,QAAQ,GAAG,EAAE,MAAM,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC;EACnD,QAAQ,GAAG,EAAE,KAAK,IAAI;EACtB,UAAU,IAAI,OAAO,KAAK,KAAK,UAAU,EAAE;EAC3C,YAAY,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;EACpD,WAAW;EACX,SAAS;EACT,OAAO,CAAC,CAAC;EACT,KAAK,CAAC,CAAC;EACP,GAAG;AACH;EACA,EAAE,IAAI,eAAe,GAAG;EACxB,IAAI,OAAO,IAAI,CAAC,gBAAgB,CAAC;EACjC,GAAG;AACH;EACA,EAAE,IAAI,eAAe,CAAC,GAAG,EAAE;EAC3B,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;EACjC,MAAM,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;EAC9C,KAAK,MAAM;EACX,MAAM,IAAI,CAAC,gBAAgB,GAAG,CAAC,CAAC;EAChC,KAAK;EACL,GAAG;AACH;EACA,EAAE,IAAI,IAAI,GAAG;EACb,IAAI,OAAO,IAAI,CAAC,KAAK,CAAC;EACtB,GAAG;AACH;EACA,EAAE,IAAI,IAAI,CAAC,GAAG,EAAE;EAChB,IAAI,IAAI,GAAG,KAAK,SAAS,EAAE;EAC3B,MAAM,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC;EAC/B,KAAK,MAAM;EACX,MAAM,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC,QAAQ,EAAE,CAAC;EAClC,KAAK;EACL,GAAG;AACH;EACA,EAAE,IAAI,UAAU,GAAG;EACnB,IAAI,OAAO,IAAI,CAAC,WAAW,CAAC;EAC5B,GAAG;AACH;EACA,EAAE,IAAI,UAAU,CAAC,GAAG,EAAE;EACtB,IAAI,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;EACpC,GAAG;AACH;EACA,EAAE,IAAI,cAAc,GAAG;EACvB,IAAI,OAAO,IAAI,CAAC,eAAe,CAAC;EAChC,GAAG;AACH;EACA,EAAE,IAAI,cAAc,CAAC,GAAG,EAAE;EAC1B,IAAI,IAAI,CAAC,eAAe,GAAG,OAAO,CAAC,GAAG,CAAC,CAAC;EACxC,GAAG;AACH;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,SAAS,GAAG;EACd,IAAI,OAAO,IAAI,CAAC,QAAQ,CAAC;EACzB,GAAG;AACH;EACA;EACA;EACA;EACA;EACA,EAAE,KAAK,GAAG;EACV,IAAI,IAAI,IAAI,CAAC,QAAQ,EAAE;EACvB,MAAM,MAAM,IAAIC,kBAAY,CAAC,oFAAoF,CAAC,CAAC;EACnH,KAAK;AACL;EACA,IAAI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;AACzB;EACA,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;EACxB,IAAI,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;EAC7B,GAAG;AACH;EACA;EACA;EACA;EACA,EAAE,KAAK,GAAG;EACV,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;EACxB,MAAM,OAAO;EACb,KAAK;EACL,IAAI,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;EAC1B,IAAI,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;EACtB,GAAG;AACH;EACA;EACA;EACA;EACA;EACA,EAAE,IAAI,GAAG;EACT,IAAI,OAAO,IAAI,CAAC,KAAK,EAAE,CAAC;EACxB,GAAG;AACH;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE;EACnC,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;EACnC,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;EAC/C,KAAK;EACL,GAAG;AACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,mBAAmB,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;AACxC;EACA;EACA;EACA;EACA;EACA,EAAE,GAAG,CAAC,YAAY,EAAE;EACpB,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;EACxB,MAAM,OAAO;EACb,KAAK;AACL;EACA,IAAI,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,YAAY,CAAC,GAAG,YAAY,GAAG,CAAC,YAAY,CAAC,CAAC;AAClF;EACA;EACA,IAAI,IAAI,SAAS,CAAC,MAAM,GAAG,IAAI,CAAC,gBAAgB,EAAE;EAClD,MAAM,SAAS,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;EAC9C,KAAK,MAAM;EACX,MAAM,MAAM,aAAa,GAAG,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC,MAAM,CAAC;EACrE,MAAM,IAAI,sBAAsB,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;EAChD,MAAM,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,aAAa,EAAE,CAAC,IAAI,CAAC,EAAE;EACjD;EACA,QAAQ,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;EACzB,UAAU,sBAAsB,GAAG,CAAC,EAAE,sBAAsB,CAAC,UAAU,CAAC,CAAC;EACzE,SAAS,MAAM;EACf,UAAU,sBAAsB,GAAG,CAAC,EAAE,sBAAsB,CAAC,aAAa,CAAC,CAAC;EAC5E,SAAS;EACT,QAAQ,SAAS,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;EAC/C,OAAO;EACP,KAAK;AACL;EACA,IAAI,MAAM,6BAA6B,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,KAAK;EAC7E;EACA,MAAM,MAAM,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,GAAG,GAAG,IAAI,KAAK,EAAE,IAAI,CAAC,CAAC;EAC7D,MAAM,OAAO,IAAI,4BAA4B,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;EACpE,KAAK,CAAC,CAAC;AACP;EACA,IAAI,MAAM,OAAO,GAAG,IAAI,sBAAsB,CAAC,QAAQ,EAAE;EACzD,MAAM,OAAO,EAAE,IAAI,2BAA2B,CAAC,CAAC,IAAI,uBAAuB,CAAC,6BAA6B,CAAC,CAAC,CAAC;EAC5G,MAAM,WAAW,EAAE,CAAC;EACpB,KAAK,CAAC,CAAC;EACP,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;AAClC;EACA,IAAI,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE;EAC3B,MAAM,IAAI,CAAC,KAAK,EAAE,CAAC;EACnB,KAAK;EACL,GAAG;AACH;EACA;EACA;EACA;EACA;EACA;EACA;EACA,EAAE,KAAK,CAAC,SAAS,EAAE,WAAW,EAAE;EAChC,IAAI,MAAM,WAAW,GAAG,WAAW,IAAI,IAAID,YAAU,CAAC,SAAS,CAAC,CAAC;AACjE;EACA;EACA,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,EAAE;EACxC,MAAM,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,QAAQ,IAAI,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;EAChF,KAAK;EACL,IAAI,MAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC;EAC/D,IAAI,IAAI,UAAU,EAAE;EACpB,MAAM,UAAU,CAAC,WAAW,CAAC,CAAC;EAC9B,KAAK;EACL,GAAG;EACH;;;;;;;;;;;;;;"}